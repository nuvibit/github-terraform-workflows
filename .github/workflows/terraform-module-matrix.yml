name: TERRAFORM MODULE MATRIX

on:
  workflow_call:
    inputs:
      tfe_hostname:
        description: 'Hostname for terraform cloud/enterprise'
        default: 'app.terraform.io'
        required: false
        type: string
      terraform_version:
        description: 'Terraform version used to format code'
        default: 'latest'
        required: false
        type: string
      registry_hostname:
        description: 'Hostname for terraform registry used to download providers'
        default: 'registry.terraform.io'
        required: false
        type: string
      terratest_max_parallel:
        description: 'Maximum number of terratest runs that should run simultaneously'
        default: 1
        required: false
        type: number
      terratest_examples_path:
        description: 'Path to terratest example directory'
        default: 'examples'
        required: false
        type: string
      terratest_config_repo:
        description: 'Public repo where terratest matrix json is stored'
        default: 'nuvibit/github-terratest-config'
        required: false
        type: string
      terratest_config_repo_ref:
        description: 'Ref or branch of terratest_config_repo'
        default: 'main'
        required: false
        type: string
      terratest_config_repo_path:
        description: 'Path to terratest matrix json config in terratest_config_repo (e.g. "aws/matrix.json")'
        default: ''
        required: false
        type: string
      tflint_repo:
        description: 'Public repo where tflint config is stored'
        default: 'nuvibit/github-tflint-config'
        required: false
        type: string
      tflint_repo_config_path:
        description: 'Path to tflint config in tflint_repo (e.g. "aws/.tflint.hcl")'
        default: ''
        required: false
        type: string
      tflint_repo_ref:
        description: 'Ref or branch of tflint_repo'
        default: 'main'
        required: false
        type: string
      tflint_version:
        description: 'Tflint version to use'
        default: 'latest'
        required: false
        type: string
      tfsec_version:
        description: 'Tfsec version to use'
        default: 'latest'
        required: false
        type: string
      tfsec_directory:
        description: 'Directory which should be scanned by tfsec'
        default: 'examples'
        required: false
        type: string
      commit_user:
        description: 'Username which should be used for commits by github action'
        default: 'github-actions'
        required: false
        type: string
      commit_email:
        description: 'Email which should be used for commits by github action'
        default: 'noreply@github.com'
        required: false
        type: string
    secrets:
      GHE_API_TOKEN:
        required: true
      TFE_API_TOKEN:
        required: true
      TERRATEST_AWS_DEFAULT_REGION:
        required: false
      TERRATEST_AWS_ACCESS_KEY_ID:
        required: false
      TERRATEST_AWS_SECRET_ACCESS_KEY:
        required: false
      TERRATEST_ARM_SUBSCRIPTION_ID:
        required: false
      TERRATEST_ARM_TENANT_ID:
        required: false
      TERRATEST_ARM_CLIENT_ID:
        required: false
      TERRATEST_ARM_CLIENT_SECRET:
        required: false

# Ensures that only one workflow runs at a time
concurrency: ${{ github.repository }}/${{ github.event.pull_request.head.ref || github.ref }}

jobs:
  terraform-fmt:
    runs-on: ubuntu-latest
    outputs:
      fmt_status: ${{ steps.fmt.outcome }}
      diff_exists: ${{ steps.fmt_commit.outputs.diff }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Commit Changes
        id: fmt_commit
        run: |
          git config --local user.name "${{ inputs.commit_user }}"
          git config --local user.email "${{ inputs.commit_email }}"
          if [[ -z $(git status -s) ]]; then
            echo "::set-output name=diff::false"
          else
            echo "::set-output name=diff::true"
          fi
          git diff-index --quiet HEAD || git commit -m "style(terraform fmt): format code" -a

      - name: Push Changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}

  terraform-docs:
    needs: [terraform-fmt]
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      docs_status: ${{ steps.docs.outcome }}
      diff_exists: ${{ steps.docs.outputs.num_changed > 0 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Check For Submodules
        id: check_submodules
        run: |
          if [[ -d "./modules" ]]; then
              echo "::set-output name=dir_exists::true"
          else
              echo "::set-output name=dir_exists::false"
          fi

      - name: Run Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: .
          recursive: ${{ steps.check_submodules.outputs.dir_exists }}
          recursive-path: modules
          output-file: README.md
          output-method: inject
          args: --sort-by required
          git-push: true
          git-push-user-name: ${{ inputs.commit_user }}
          git-push-user-email: ${{ inputs.commit_email }}
          git-commit-message: "docs(terraform-docs): update readme"

  # terraform-lint:
  #   needs: [terraform-fmt, terraform-docs]
  #   if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
  #   runs-on: ubuntu-latest
  #   outputs:
  #     lint_status: ${{ steps.lint.outcome }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.ref }}
  #         token: ${{ secrets.GHE_API_TOKEN }}

  #     - name: Get TFLint Config
  #       uses: terraform-linters/tflint-load-config-action@v0
  #       if: ${{ inputs.tflint_repo_config_path != '' }}
  #       with:
  #         source-repo: ${{ inputs.tflint_repo }}
  #         source-path: ${{ inputs.tflint_repo_config_path }}
  #         source-ref: ${{ inputs.tflint_repo_ref }}

  #     - name: Run TFLint
  #       uses: reviewdog/action-tflint@v1
  #       id: lint
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         tflint_version: ${{ inputs.tflint_version }}
  #         reporter: github-pr-check
  #         fail_on_error: true
  #         filter_mode: nofilter
  #         level: error
  #         flags: ""
  #         tflint_init: true

  # terraform-security:
  #   needs: [terraform-fmt, terraform-docs, terraform-lint]
  #   if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
  #   runs-on: ubuntu-latest
  #   outputs:
  #     security_status: ${{ steps.security.outcome }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.ref }}
  #         token: ${{ secrets.GHE_API_TOKEN }}
      
  #     - name: Run TFSec
  #       uses: reviewdog/action-tfsec@v1
  #       id: security
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         tfsec_version: ${{ inputs.tfsec_version }}
  #         reporter: github-pr-check
  #         fail_on_error: true
  #         filter_mode: nofilter
  #         level: error
  #         flags: ""
  #         tfsec_flags: --force-all-dirs
  #         working_directory: ${{ inputs.tfsec_directory }}

  terratest-config:
    needs: [terraform-fmt, terraform-docs,]
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

    steps:
      - name: Checkout
        if: ${{ inputs.terratest_config_repo_path != '' }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.terratest_config_repo }}
          ref: ${{ inputs.terratest_config_repo_ref }}

      - name: Get Terratest Matrix Config
        if: ${{ inputs.terratest_config_repo_path != '' }}
        id: set_matrix
        run: |
          JSON=$(jq -r @json <<< cat ${{ inputs.terratest_config_repo_path }})
          echo "::set-output name=matrix::$JSON"

  terratest-run:
    needs: [terraform-fmt, terraform-docs, terratest-config]
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest

    strategy:
      max-parallel: ${{ inputs.terratest_max_parallel }}
      matrix: ${{ fromJson(needs.terratest-config.outputs.matrix) }}

    steps:
      - name: Set Git Access Token
        run: |
          git config --global url."https://oauth2:${{ secrets.GHE_API_TOKEN }}@github.com".insteadOf https://github.com

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Check For Examples
        run: |
          if [[ ! -d "./${{ inputs.terratest_examples_path }}" ]]; then
            echo "could not find examples directory '${{ inputs.terratest_examples_path }}' required for terratest"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v3

      - name: Get Dependencies
        working-directory: ./test
        run: |
          go get -v -t -d
          wget https://github.com/gruntwork-io/terratest/releases/download/v0.40.6/terratest_log_parser_linux_amd64
          chmod +x terratest_log_parser_linux_amd64

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}
          terraform_wrapper: false
          cli_config_credentials_hostname: ${{ inputs.tfe_hostname }}
          cli_config_credentials_token: ${{ secrets.TFE_API_TOKEN }}

      - name: Generate Terraform Lock File
        if: ${{ matrix.provider_version != '' }}
        id: terraform_lock_file
        working-directory: ./examples
        env:
          PROVIDER_JSON: ${{ toJson(matrix.provider_version) }}
        run: |
          for d in */; do
            # create artifact name for github action
            artifact_name="terraform version $(echo "${{ matrix.terraform_version }}")<br>"
            # initialize terraform lock file
            touch "$d/.terraform.lock.hcl"
            # get required provider versions from matrix json
            for provider in $(jq -r 'keys | .[]' <<< $PROVIDER_JSON); do
              version=$(jq -r ".[$k]" <<< $PROVIDER_JSON)
              # get provider version if contains X from terraform registry
              if [[ "$version" == *"X"* ]]; then
                for i in $(curl -s https://registry.terraform.io/v1/providers/$provider | jq -r '.versions' | jq 'reverse' | jq '.[]'); do
                  i=$(echo $i | tr -d '"')
                  declare -a semver
                  semver=($(echo "$version" | tr '.' '\n'))
                  # if X is on first position
                  if [[ "${semver[0]}" == "X" ]]; then
                    version=$i
                    break;
                  # if X is on second position
                  elif [[ "${semver[1]}" == "X" ]]; then
                    if [[ $i == "${semver[0]}."* ]]; then
                      version=$i
                      break;
                    fi
                  # if X is on third position
                  elif [[ "${semver[2]}" == "X" ]]; then
                    if [[ $i == "${semver[0]}.${semver[1]}."* ]]; then
                      version=$i
                      break;
                    fi
                  fi
                done
              fi
              # append provider versions to artifact name
              artifact_name+="provider $(echo "$provider" | sed 's:\/:\.:g') = ${version}<br>"
              # generate terraform lock file for each provider in each terratest example directory
              echo -en "provider \"${{ inputs.registry_hostname }}/$provider\" {\n  version = \"$version\"\n}\n\n" >> "$d/.terraform.lock.hcl"
            done
            cat "$d/.terraform.lock.hcl"
            echo "::set-output name=artifact_name::${artifact_name}"
          done

      - name: Run Terratest
        working-directory: ./test
        env:
          AWS_DEFAULT_REGION: ${{ secrets.TERRATEST_AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRATEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRATEST_AWS_SECRET_ACCESS_KEY }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRATEST_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TERRATEST_ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.TERRATEST_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRATEST_ARM_CLIENT_SECRET }}
        run: |
          go test -v -timeout 30m 2>&1 | tee >(./terratest_log_parser_linux_amd64)
          test ${PIPESTATUS[0]} -eq 0
          echo "./out/summary.log"
      
      - name: Job Summary
        id: terratest_summary
        if: ${{ always() }}
        working-directory: ./test
        run: |
          echo '### TERRATEST SUMMARY :octocat:' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.terraform_lock_file.outputs.artifact_name }}' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| result | test |' >> $GITHUB_STEP_SUMMARY
          echo '|---|---|' >> $GITHUB_STEP_SUMMARY

          if [[ ! -f "./out/summary.log" ]]; then
            echo '' >> $GITHUB_STEP_SUMMARY
            echo ":x: missing terratest log file 'summary.log'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          test_found=false
          while IFS= read -r line
          do
            if [[ "$line" == *"PASSx"* ]]; then
              echo "| $line |" | sed 's/--- PASS:/:white_check_mark: |/g' >> $GITHUB_STEP_SUMMARY
              test_found=true
            elif [[ "$line" == *"FAIL"* ]]; then
              echo "| $line |" | sed 's/--- FAIL:/:x: |/g' >> $GITHUB_STEP_SUMMARY
              test_found=true
              echo "::set-output name=test_failed::true"
            fi
          done < "./out/summary.log"

          if [[ $test_found == false ]]; then
            echo '' >> $GITHUB_STEP_SUMMARY
            echo ":x: no terratest results found in 'summary.log'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi


        # env:
        #   TF_FMT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-fmt.outputs.fmt_status != 'success'] }}
        #   TF_DOCS_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-docs.outputs.docs_status != 'success'] }}
        #   TF_LINT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-lint.outputs.lint_status != 'success'] }}
        #   TF_SECURITY_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-security.outputs.security_status != 'success'] }}
        # echo '| terraform format | ${{ env.TF_FMT_RESULT }} |' >> $GITHUB_STEP_SUMMARY
        # echo '| terraform docs | ${{ env.TF_DOCS_RESULT }} |' >> $GITHUB_STEP_SUMMARY
        # echo '| terraform lint | ${{ env.TF_LINT_RESULT }} |' >> $GITHUB_STEP_SUMMARY
        # echo '| terraform security | ${{ env.TF_LINT_RESULT }} |' >> $GITHUB_STEP_SUMMARY

  # publish-results:
  #   needs: [terraform-fmt, terraform-docs, terratest-config, terratest-run]
  #   runs-on: ubuntu-latest
  #   if: ${{ success() || failure() }}

  #   steps:
      # - name: Publish Terraform Results
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   env:
      #     TERRAFORM_VERSION: ${{ inputs.terraform_version }}
      #     TF_FMT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-fmt.outputs.fmt_status != 'success'] }}
      #     TF_DOCS_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-docs.outputs.docs_status != 'success'] }}
      #     TF_LINT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-lint.outputs.lint_status != 'success'] }}
      #     TF_SECURITY_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-security.outputs.security_status != 'success'] }}
      #   with:
      #     message: |
      #       ## TERRAFORM (${{ env.TERRAFORM_VERSION }}) RESULTS
      #       | action | status |
      #       |---|---|
      #       | terraform format | ${{ env.TF_FMT_RESULT }} |
      #       | terraform docs | ${{ env.TF_DOCS_RESULT }} |
      #       | terraform lint | ${{ env.TF_LINT_RESULT }} |
      #       | terraform security | ${{ env.TF_LINT_RESULT }} |

      #       Results for commit ${{ github.sha }}.

      #       :recycle: This comment will be updated with latest results.

      # - name: Download Terratest Results
      #   uses: actions/download-artifact@v3
      #   with:
      #     path: artifacts

      # - name: Publish Terratest Results
      #   uses: EnricoMi/publish-unit-test-result-action@v1
      #   with:
      #     files: artifacts/**/*.xml
      #     check_name: TERRATEST RESULTS
      #     comment_title: TERRATEST RESULTS
      #     hide_comments: all but latest
      #     report_individual_runs: true
