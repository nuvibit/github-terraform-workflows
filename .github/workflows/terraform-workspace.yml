name: TERRAFORM WORKSPACE

on:
  workflow_call:
    inputs:
      tfe_hostname:
        description: 'Hostname for terraform cloud/enterprise'
        default: 'app.terraform.io'
        required: false
        type: string
      tfe_backend_file:
        description: 'Name of file where terraform cloud/enterprise backend configuration is stored (inside terraform_working_directory)'
        default: 'backend.tf'
        required: false
        type: string
      tfe_workspace_version:
        description: 'Terraform version will be queried from the terraform cloud/enterprise workspace'
        default: true
        required: false
        type: boolean
      terraform_version:
        description: 'Terraform version will be ignored if tfe_workspace_version is "true"'
        default: 'latest'
        required: false
        type: string
      terraform_working_directory:
        description: 'A relative path starting with "." that Terraform will execute within (e.g. "./infrastructure")'
        default: '.'
        required: false
        type: string
      tflint_repo:
        description: 'Public repo where tflint config is stored'
        default: 'nuvibit/github-tflint-config'
        required: false
        type: string
      tflint_repo_config_path:
        description: 'Path to tflint config in tflint_repo (e.g. "aws/.tflint.hcl")'
        default: ''
        required: false
        type: string
      tflint_repo_ref:
        description: 'Ref or branch of tflint_repo'
        default: 'main'
        required: false
        type: string
      tflint_version:
        description: 'Tflint version to use in github action'
        default: 'latest'
        required: false
        type: string
      tfsec_version:
        description: 'Tfsec version to use in github action'
        default: 'latest'
        required: false
        type: string
      commit_user:
        description: 'Username which should be used for commits by github action'
        default: 'github-actions'
        required: false
        type: string
      commit_email:
        description: 'Email which should be used for commits by github action'
        default: 'noreply@github.com'
        required: false
        type: string
    secrets:
      GHE_API_TOKEN:
        required: true
      TFE_API_TOKEN:
        required: true

# Ensures that only one workflow runs at a time
concurrency: ${{ github.repository }}/${{ github.event.pull_request.head.ref || github.ref }}/${{ inputs.terraform_working_directory }}

jobs:
  terraform-fmt:
    runs-on: ubuntu-latest
    outputs:
      terraform_version: ${{ steps.workspace_curl.outputs.terraform_version || inputs.terraform_version }}
      fmt_status: ${{ steps.fmt.outcome }}
      diff_exists: ${{ steps.fmt_commit.outputs.diff }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Get Workspace Info
        if: ${{ inputs.tfe_workspace_version }}
        id: workspace_curl
        env:
          BACKEND_FILE: ${{ inputs.terraform_working_directory }}/${{ inputs.tfe_backend_file }}
        run: |
          if [[ ! -f $BACKEND_FILE ]]; then
            echo "could not find terraform file '$BACKEND_FILE' with tfe backend configuration"
            exit 1
          fi

          # get workspace name from backend file (backend 'remote' config block) via perl-regexp
          WORKSPACE=$(grep -Pzo 'workspaces\W+\{\W+name\W+=\W+"\K\S+(?=")' $BACKEND_FILE)
          # get organization name from backend file (backend 'remote' config block) via perl-regexp
          ORGANIZATION=$(grep -Pzo 'backend\W+"remote"\W+\{\W+organization\W+=\W+"\K\S+(?=")' $BACKEND_FILE)

          if [[ -z "$WORKSPACE" || -z "$ORGANIZATION" ]]; then
            echo "could not get terraform cloud/enterprise organization or workspace name from '$BACKEND_FILE'"
            exit 1
          fi

          # query terraform version from tfe workspace
          curl \
          --header "Authorization: Bearer ${{ secrets.TFE_API_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          https://${{ inputs.tfe_hostname }}/api/v2/organizations/${ORGANIZATION}/workspaces/${WORKSPACE} > workspace.txt
          
          VERSION=$(cat workspace.txt | sed -rn 's|.*"terraform-version":"([0-9.]+)".*|\1|p')
          rm workspace.txt

          if [[ -z "$VERSION" ]]; then
            echo "could not get terraform version from terraform cloud/enterprise workspace '$WORKSPACE' in organization '$ORGANIZATION'"
            exit 1
          fi
          echo "::set-output name=terraform_version::${VERSION}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.workspace_curl.outputs.terraform_version || inputs.terraform_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
        working-directory: ${{ inputs.terraform_working_directory }}

      - name: Commit files
        id: fmt_commit
        run: |
          git config --local user.name "${{ inputs.commit_user }}"
          git config --local user.email "${{ inputs.commit_email }}"
          if [[ -z $(git status -s) ]]; then
            echo "::set-output name=diff::false"
          else
            echo "::set-output name=diff::true"
          fi
          git diff-index --quiet HEAD || git commit -m "style(terraform fmt): format code" -a

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref || github.ref }}

  terraform-docs:
    needs:
      - terraform-fmt
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      docs_status: ${{ steps.docs.outcome }}
      diff_exists: ${{ steps.docs.outputs.num_changed > 0 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: ${{ inputs.terraform_working_directory }}
          output-file: README.md
          output-method: inject
          args: --sort-by required
          git-push: true
          git-push-user-name: ${{ inputs.commit_user }}
          git-push-user-email: ${{ inputs.commit_email }}
          git-commit-message: "docs(terraform-docs): update readme"

  terraform-lint:
    needs:
      - terraform-fmt
      - terraform-docs
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      lint_status: ${{ steps.lint.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Get TFLint Config
        uses: terraform-linters/tflint-load-config-action@v0
        if: ${{ inputs.tflint_repo_config_path != '' }}
        with:
          source-repo: ${{ inputs.tflint_repo }}
          source-path: ${{ inputs.tflint_repo_config_path }}
          source-ref: ${{ inputs.tflint_repo_ref }}

      - name: Run TFLint
        uses: reviewdog/action-tflint@v1
        id: lint
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ${{ inputs.terraform_working_directory }}
          tflint_version: ${{ inputs.tflint_version }}
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter
          level: error
          flags: ""
          tflint_init: true

  terraform-security:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      security_status: ${{ steps.security.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}
      
      - name: Run TFSec
        uses: reviewdog/action-tfsec@v1
        id: security
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ${{ inputs.terraform_working_directory }}
          tfsec_version: ${{ inputs.tfsec_version }}
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter
          level: error
          flags: ""
          tfsec_flags: --force-all-dirs

  terraform-run:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      tfe_plan_url: ${{ steps.tfe_plan_url.outputs.url }}
      tfe_apply_url: ${{ steps.tfe_apply_url.outputs.url }}
      init_status: ${{ steps.init.outcome }}
      plan_status: ${{ steps.plan.outputs.exitcode == '1' || steps.plan.outcome }}
      apply_status: ${{ steps.apply.outputs.exitcode == '1' || steps.apply.outcome }}

    steps:
      - name: Set Git Access Token
        run: |
          git config --global url."https://oauth2:${{ secrets.GHE_API_TOKEN }}@github.com".insteadOf https://github.com

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ needs.terraform-fmt.outputs.terraform_version }}
          terraform_wrapper: true
          cli_config_credentials_hostname: ${{ inputs.tfe_hostname }}
          cli_config_credentials_token: ${{ secrets.TFE_API_TOKEN }}

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.terraform_working_directory }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: ${{ github.event_name == 'pull_request' }}
        working-directory: ${{ inputs.terraform_working_directory }}
        run: terraform plan -no-color 2>&1 | tee /tmp/terraform.plan
        continue-on-error: true

      - name: Get TFE Plan URL
        id: tfe_plan_url
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          match=$(head -50 /tmp/terraform.plan | egrep -i 'https:\/\/.*\/runs\/run-\S+')
          echo "::set-output name=url::$match"
        continue-on-error: true

      - name: Terraform Plan Outcome
        if: ${{ steps.plan.outcome == 'failure' || steps.plan.outputs.exitcode == '1' }}
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: ${{ inputs.terraform_working_directory }}
        if: ${{ github.event_name == 'push' }}
        run: terraform apply -auto-approve 2>&1 | tee /tmp/terraform.apply

      - name: Get TFE Apply URL
        id: tfe_apply_url
        if: ${{ github.event_name == 'push' }}
        run: |
          match=$(head -50 /tmp/terraform.apply | egrep -i 'https:\/\/.*\/runs\/run-\S+')
          echo "::set-output name=url::$match"
        continue-on-error: true

      - name: Terraform Apply Outcome
        if: ${{ steps.apply.outcome == 'failure' || steps.apply.outputs.exitcode == '1' }}
        run: exit 1

  workflow-summary:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
      - terraform-run
    runs-on: ubuntu-latest
    if: ${{ always() }}

    steps:
      - name: Workflow Summary
        env:
          TFE_PLAN_URL: ${{ needs.terraform-run.outputs.tfe_plan_url }}
          TFE_APPLY_URL: ${{ needs.terraform-run.outputs.tfe_apply_url }}
          TERRAFORM_VERSION: ${{ needs.terraform-fmt.outputs.terraform_version }}
          TF_FMT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-fmt.outputs.fmt_status != 'success'] }}
          TF_DOCS_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-docs.outputs.docs_status != 'success'] }}
          TF_LINT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-lint.outputs.lint_status != 'success'] }}
          TF_SECURITY_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-security.outputs.security_status != 'success'] }}
          TF_INIT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-run.outputs.init_status != 'success'] }}
          TF_PLAN_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-run.outputs.plan_status != 'success'] }}
          TF_APPLY_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-run.outputs.apply_status != 'success'] }}
          TF_PLAN_OR_APPLY: ${{ fromJSON('["apply", "plan"]')[github.event_name != 'push'] }}
        run: |
          echo '### WORKFLOW SUMMARY :octocat:' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| result | job |' >> $GITHUB_STEP_SUMMARY
          echo '|---|---|' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_FMT_RESULT }} | terraform format |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_DOCS_RESULT }} | terraform docs |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_LINT_RESULT }} | terraform lint |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_SECURITY_RESULT }} | terraform security |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_PLAN_RESULT || env.TF_APPLY_RESULT }} | terraform [${{ env.TF_PLAN_OR_APPLY }}](${{ env.TFE_PLAN_URL || env.TFE_APPLY_URL }}) |' >> $GITHUB_STEP_SUMMARY
