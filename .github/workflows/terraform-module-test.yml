name: TERRAFORM MODULE TEST

on:
  workflow_call:
    inputs:
      github_runner:
        description: 'Name of GitHub-hosted runner or self-hosted runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      use_opentofu:
        description: 'Use OpenTofu instead of Terraform to format the code'
        default: false
        required: false
        type: boolean
      terraform_version:
        description: 'Terraform version used for formatting and linting'
        default: 'latest'
        required: false
        type: string
      terraform_requirements_file:
        description: 'File where terraform requirements are defined'
        default: 'main.tf'
        required: false
        type: string
      terraform_modules_auth:
        description: 'Authentication method for private modules (none|github-app). If set to "github-app", the secrets "TERRAFORM_MODULES_APP_ID" and "TERRAFORM_MODULES_APP_PRIVATE_KEY" are required.'
        default: 'none'
        required: false
        type: string
      terraform_modules_github_owner:
        description: 'GitHub owner/organization name for private modules (required when terraform_modules_auth is github-app)'
        default: ''
        required: false
        type: string
      terraform_registry_hostname:
        description: 'Hostname for terraform registry used to download providers'
        default: 'registry.terraform.io'
        required: false
        type: string
      aws_default_region:
        description: 'Default AWS region to use for Terratest'
        default: 'eu-central-1'
        required: false
        type: string
      aws_oidc_role_arn:
        description: 'AWS OIDC role ARN to assume for Terratest'
        default: ''
        required: true
        type: string
      terratest_version:
        description: 'Terratest version'
        default: 'v0.48.0'
        required: false
        type: string
      terratest_path:
        description: 'Path to terratest directory'
        default: 'test'
        required: false
        type: string
      terratest_max_parallel:
        description: 'Maximum number of terratest runs that should run simultaneously'
        default: 1
        required: false
        type: number
      terratest_config_repo:
        description: 'Public repo where terratest matrix json is stored'
        default: 'nuvibit/github-terratest-config'
        required: false
        type: string
      terratest_config_repo_ref:
        description: 'Ref or branch of terratest_config_repo'
        default: 'main'
        required: false
        type: string
      terratest_config_repo_path:
        description: 'Path to terratest matrix json config in terratest_config_repo'
        default: 'aws/matrix.json'
        required: false
        type: string
      tflint_repo:
        description: 'Public repo where tflint config is stored'
        default: 'nuvibit/github-tflint-config'
        required: false
        type: string
      tflint_repo_config_path:
        description: 'Path to tflint config in tflint_repo'
        default: 'aws/.tflint.hcl'
        required: false
        type: string
      tflint_repo_ref:
        description: 'Ref or branch of tflint_repo'
        default: 'main'
        required: false
        type: string
      tflint_version:
        description: 'Tflint version to use'
        default: 'latest'
        required: false
        type: string
      trivy_version:
        description: 'Trivy version to use'
        default: 'v0.61.1' # fixme: hardcoding version until problems in 0.62.0 are solved.
        required: false
        type: string
      commit_user:
        description: 'Username which should be used for commits by github action'
        default: 'github-actions'
        required: false
        type: string
      commit_email:
        description: 'Email which should be used for commits by github action'
        default: 'noreply@github.com'
        required: false
        type: string
      concurrency_group:
        description: 'Name of concurrency group to manage concurrent github action runs'
        default: ${{ github.repository }}/${{ github.event.pull_request.head.ref || github.ref }}
        required: false
        type: string
    secrets:
      # GitHub App credentials to use instead of default GITHUB_TOKEN to avoid not triggering workflow runs on commit
      GH_APP_ID:
        required: true
      GH_APP_PRIVATE_KEY:
        required: true
      #Â (optional) GitHub App credentials for accessing private Terraform modules (requires 'terraform_modules_auth' to be set to "github-app" and 'terraform_modules_github_owner' to be set)
      TERRAFORM_MODULES_APP_ID:
        required: false
      TERRAFORM_MODULES_APP_PRIVATE_KEY:
        required: false
      # (optional) Token for accessing private Terraform module registry (requires 'terraform_registry_hostname' to be set to a private registry)
      TERRAFORM_REGISTRY_TOKEN:
        required: false
      # (optional) Spacelift API key credentials for Spacelift integration
      SPACELIFT_API_KEY_ENDPOINT:
        required: false
      SPACELIFT_API_KEY_ID:
        required: false
      SPACELIFT_API_KEY_SECRET:
        required: false

# Ensures that only one workflow runs at a time
concurrency: ${{ inputs.concurrency_group }}

# Grant necessary permissions for the workflow
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform-fmt:
    runs-on: ${{ inputs.github_runner }}
    outputs:
      fmt_status: ${{ steps.fmt.outcome }}
      diff_exists: ${{ steps.fmt_commit.outputs.diff }}

    steps:
      - name: Get Github Access Token
        id: github_app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # if owner and repositories are empty, access will be scoped to only the current repository
          # owner: ''
          # repositories: ''

      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.github_app_token.outputs.token }}

      - name: Setup Terraform
        if: ${{ inputs.use_opentofu == false }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Setup OpenTofu
        if: ${{ inputs.use_opentofu == true }}
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.terraform_version }}
          tofu_wrapper: false

      - name: Terraform Format
        id: fmt
        run: |
          if [[ "${{ inputs.use_opentofu }}" == "true" ]]; then
            tofu fmt -recursive
          else
            terraform fmt -recursive
          fi

      - name: Commit Changes
        id: fmt_commit
        run: |
          git config --local user.name "${{ inputs.commit_user }}"
          git config --local user.email "${{ inputs.commit_email }}"
          if [[ -z $(git status -s) ]]; then
              echo "diff=false" >> $GITHUB_OUTPUT
          else
              echo "diff=true" >> $GITHUB_OUTPUT
          fi
          git diff-index --quiet HEAD || git commit -m "style(terraform fmt): format code" -a

      - name: Push Changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ steps.github_app_token.outputs.token }}
          branch: ${{ github.event.pull_request.head.ref }}

  terraform-docs:
    needs:
      - terraform-fmt
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      docs_status: ${{ steps.docs.outcome }}
      diff_exists: ${{ steps.docs.outputs.num_changed > 0 }}

    steps:
      - name: Get Github Access Token
        id: github_app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # if owner and repositories are empty, access will be scoped to only the current repository
          # owner: ''
          # repositories: ''

      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.github_app_token.outputs.token }}

      - name: Check For Submodules
        id: check_submodules
        run: |
          if [[ -d "./modules" ]]; then
              echo "dir_exists=true" >> $GITHUB_OUTPUT
          else
              echo "dir_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          recursive: ${{ steps.check_submodules.outputs.dir_exists }}
          recursive-path: modules
          output-file: README.md
          output-method: inject
          output-format: markdown document
          args: --sort-by required --anchor=false
          git-push: true
          git-push-user-name: ${{ inputs.commit_user }}
          git-push-user-email: ${{ inputs.commit_email }}
          git-commit-message: "docs(terraform-docs): update tfdocs"

  terraform-lint:
    needs: 
      - terraform-fmt
      - terraform-docs
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      lint_status: ${{ steps.lint.outcome }}

    steps:
      - name: Get Github Access Token
        id: github_app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # if owner and repositories are empty, access will be scoped to only the current repository
          # owner: ''
          # repositories: ''

      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.github_app_token.outputs.token }}

      - name: Get TFLint Config
        uses: terraform-linters/tflint-load-config-action@v2
        if: ${{ inputs.tflint_repo_config_path != '' }}
        with:
          source-repo: ${{ inputs.tflint_repo }}
          source-path: ${{ inputs.tflint_repo_config_path }}
          source-ref: ${{ inputs.tflint_repo_ref }}
          destination-path: .tflint.hcl

      - name: Run TFLint
        uses: reviewdog/action-tflint@v1
        id: lint
        with:
          github_token: ${{ steps.github_app_token.outputs.token }}
          tflint_version: ${{ inputs.tflint_version }}
          reporter: github-pr-check
          fail_level: error
          filter_mode: nofilter
          level: error
          flags: ""
          tflint_init: true

  terraform-security:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      security_status: ${{ steps.security.outcome }}

    steps:
      - name: Get Github Access Token
        id: github_app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # if owner and repositories are empty, access will be scoped to only the current repository
          # owner: ''
          # repositories: ''

      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.github_app_token.outputs.token }}

      - name: Check For Required Terratest Directory
        run: |
          if [[ ! -d "./${{ inputs.terratest_path }}/complete" ]]; then
            echo "could not find required directory '${{ inputs.terratest_path }}/complete' for terratest"
            exit 1
          fi
      
      - name: Run Trivy
        uses: reviewdog/action-trivy@v1
        id: security
        with:
          github_token: ${{ steps.github_app_token.outputs.token }}
          working_directory: ${{ inputs.terratest_path }}
          reporter: github-pr-check
          fail_level: error
          filter_mode: nofilter
          level: error
          flags: ""
          trivy_flags: ""
          trivy_command: config
          trivy_target: .
          trivy_version: ${{ inputs.trivy_version }}

  terratest-config:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.terratest_config_repo }}
          ref: ${{ inputs.terratest_config_repo_ref }}

      - name: Get Terratest Matrix Config
        id: set_matrix
        run: |
          JSON=$(jq -r @json <<< cat ${{ inputs.terratest_config_repo_path }})
          echo "matrix=$JSON" >> $GITHUB_OUTPUT

  terratest-run:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
      - terratest-config
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      terratest_status: ${{ steps.terratest_summary.outcome }}

    strategy:
      max-parallel: ${{ inputs.terratest_max_parallel }}
      matrix: ${{ fromJson(needs.terratest-config.outputs.matrix) }}

    steps:
      - name: Get Private Module Access Token
        if: ${{ inputs.terraform_modules_auth == 'github-app' }}
        id: private_module_access
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.TERRAFORM_MODULES_APP_ID }}
          private-key: ${{ secrets.TERRAFORM_MODULES_APP_PRIVATE_KEY }}
          # If owner is set and repositories is empty, access will be scoped to all repositories in the provided repository owner's installation
          owner: ${{ inputs.terraform_modules_github_owner }}

      - name: Set Private Module Access Token
        if: ${{ inputs.terraform_modules_auth == 'github-app' }}
        run: |
          git config --global url."https://x-access-token:${{ steps.private_module_access.outputs.token }}@github.com/".insteadOf "https://github.com/"

      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          # Ensure that the checkout action does not persist credentials to not override private module access
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Get Dependencies
        working-directory: ${{ inputs.terratest_path }}
        run: |
          wget -O go.mod https://raw.githubusercontent.com/nuvibit/github-terratest-config/refs/heads/main/dependencies/go.mod
          wget -O go.sum https://raw.githubusercontent.com/nuvibit/github-terratest-config/refs/heads/main/dependencies/go.sum
          go get -v -t -d
          wget https://github.com/gruntwork-io/terratest/releases/download/${{ inputs.terratest_version }}/terratest_log_parser_linux_amd64
          chmod +x terratest_log_parser_linux_amd64

      - name: Cleanup Terraform / OpenTofu
        run: |
          rm $(which terraform) 2>/dev/null || rm $(which opentofu) 2>/dev/null || echo "no binaries to cleanup"

      - name: Get Terraform / OpenTofu Version From Requirements
        id: from_requirements
        run: |
          terraform_version="${{ matrix.terraform_version }}"
          if [[ "$terraform_version" == "FROM_REQUIREMENTS" ]]; then
            requirements_match=$(grep -zoP 'terraform\s*\{(.|\W)*?required_version\s*=\s*"\D+([0-9\.]+)"' ${{ inputs.terraform_requirements_file }} | grep -zoP '[\d+\.]*\"$')
            terraform_version=$(echo $requirements_match | grep -zoP '[\d\.]+')
          fi
          echo "terraform_version=$terraform_version" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        if: ${{ matrix.binary == 'terraform' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.from_requirements.outputs.terraform_version }}
          terraform_wrapper: false
          cli_config_credentials_hostname: ${{ inputs.terraform_registry_hostname }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_REGISTRY_TOKEN }}

      - name: Setup OpenTofu
        if: ${{ matrix.binary == 'opentofu' }}
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ steps.from_requirements.outputs.terraform_version }}
          tofu_wrapper: false
          cli_config_credentials_hostname: ${{ inputs.terraform_registry_hostname }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_REGISTRY_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_oidc_role_arn }}
          role-session-name: GitHubActions-Terratest
          aws-region: ${{ inputs.aws_default_region }}
          role-duration-seconds: 3600

      - name: Generate Terraform Lock File
        if: ${{ matrix.provider_version != '' }}
        id: terraform_lock_file
        working-directory: ${{ inputs.terratest_path }}
        env:
          PROVIDER_JSON: ${{ toJson(matrix.provider_version) }}
        run: |
          for d in */; do
            # create artifact name for github action
            artifact_name="terraform version $(echo "${{ steps.from_requirements.outputs.terraform_version }}")<br>"
            # initialize terraform lock file
            touch "$d/.terraform.lock.hcl"
            # get required provider versions from matrix json
            for provider in $(jq -r 'keys | .[]' <<< $PROVIDER_JSON); do
              version=$(jq -r ".[$k]" <<< $PROVIDER_JSON)
              # get provider version if contains X from terraform registry
              if [[ "$version" == *"X"* ]]; then
                for i in $(curl -s https://registry.terraform.io/v1/providers/$provider | jq -r '.versions' | jq 'reverse' | jq '.[]'); do
                  if [[ $i =~ "-" ]];
                  then
                    continue
                  fi
                  i=$(echo $i | tr -d '"')
                  declare -a semver
                  semver=($(echo "$version" | tr '.' '\n'))
                  # if X is on first position
                  if [[ "${semver[0]}" == "X" ]]; then
                    version=$i
                    break;
                  # if X is on second position
                  elif [[ "${semver[1]}" == "X" ]]; then
                    if [[ $i == "${semver[0]}."* ]]; then
                      version=$i
                      break;
                    fi
                  # if X is on third position
                  elif [[ "${semver[2]}" == "X" ]]; then
                    if [[ $i == "${semver[0]}.${semver[1]}."* ]]; then
                      version=$i
                      break;
                    fi
                  fi
                done
              elif [[ "$version" == "FROM_REQUIREMENTS" ]]; then
                version_match=$(grep -zoP 'required_providers\W*\{\W*aws(.|\n)*?version\W*\"\D*?(\d+\.\d+\.?\d*)\"' $GITHUB_WORKSPACE/*.tf | grep -zoP '[\d+\.]*\"$')
                version=$(echo $version_match | grep -zoP '[\d\.]+')
                num="${version//[^.]}"
                count="${#num}"
                if [[ $count == 1 ]]; then
                  version="$version.0"
                fi
              fi
              # append provider versions to artifact name
              artifact_name+="provider $(echo "$provider" | sed 's:\/:\.:g') = ${version}<br>"
              # generate terraform lock file for each provider in each terratest example directory
              echo -en "provider \"${{ inputs.terraform_registry_hostname }}/$provider\" {\n  version = \"$version\"\n}\n\n" >> "$d/.terraform.lock.hcl"
            done
            cat "$d/.terraform.lock.hcl"
            echo "artifact_name=${artifact_name}" >> $GITHUB_OUTPUT
          done

      - name: Run Terratest
        id: terratest_run
        working-directory: ${{ inputs.terratest_path }}
        env:
          AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
          SPACELIFT_API_KEY_ENDPOINT: ${{ secrets.SPACELIFT_API_KEY_ENDPOINT }}
          SPACELIFT_API_KEY_ID: ${{ secrets.SPACELIFT_API_KEY_ID }}
          SPACELIFT_API_KEY_SECRET: ${{ secrets.SPACELIFT_API_KEY_SECRET }}
        run: |
          go test -v -timeout 30m 2>&1 | tee >(./terratest_log_parser_linux_amd64)
          test ${PIPESTATUS[0]} -eq 0
          echo "./out/summary.log"
        continue-on-error: true
      
      - name: Terratest Summary
        if: ${{ always() }}
        id: terratest_summary
        working-directory: ${{ inputs.terratest_path }}
        run: |
          echo '### TERRATEST SUMMARY :octocat:' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.terraform_lock_file.outputs.artifact_name }}' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| result | test |' >> $GITHUB_STEP_SUMMARY
          echo '|---|---|' >> $GITHUB_STEP_SUMMARY

          if [[ ! -f "./out/summary.log" ]]; then
            echo '' >> $GITHUB_STEP_SUMMARY
            echo ":x: missing terratest log file 'summary.log'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          test_exists=false
          test_failed=false
          while IFS= read -r line
          do
            if [[ "$line" == *"--- PASS"* ]]; then
              echo "| $line |" | sed 's/--- PASS:/:white_check_mark: |/g' >> $GITHUB_STEP_SUMMARY
              test_exists=true
            elif [[ "$line" == *"--- FAIL"* ]]; then
              echo "| $line |" | sed 's/--- FAIL:/:x: |/g' >> $GITHUB_STEP_SUMMARY
              test_exists=true
              test_failed=true
            fi
          done < "./out/summary.log"

          if [[ $test_exists == false ]]; then
            echo '' >> $GITHUB_STEP_SUMMARY
            echo ":x: no terratest results found in 'summary.log'" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ $test_failed == true ]]; then
            exit 1
          fi
        continue-on-error: true

      - name: Terratest Outcome
        if: ${{ steps.terratest_summary.outcome == 'failure' || steps.terratest_summary.outputs.exitcode == '1' }}
        run: exit 1

  workflow-summary:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
      - terratest-config
      - terratest-run
    runs-on: ${{ inputs.github_runner }}
    if: ${{ always() }}

    steps:
      - name: Workflow Summary
        env:
          TF_FMT_RESULT: ${{ needs.terraform-fmt.result == 'skipped' && ':heavy_minus_sign:' || (needs.terraform-fmt.outputs.fmt_status == 'success' && ':white_check_mark:' || ':x:') }}
          TF_DOCS_RESULT: ${{ needs.terraform-docs.result == 'skipped' && ':heavy_minus_sign:' || (needs.terraform-docs.outputs.docs_status == 'success' && ':white_check_mark:' || ':x:') }}
          TF_LINT_RESULT: ${{ needs.terraform-lint.result == 'skipped' && ':heavy_minus_sign:' || (needs.terraform-lint.outputs.lint_status == 'success' && ':white_check_mark:' || ':x:') }}
          TF_SECURITY_RESULT: ${{ needs.terraform-security.result == 'skipped' && ':heavy_minus_sign:' || (needs.terraform-security.outputs.security_status == 'success' && ':white_check_mark:' || ':x:') }}
          TF_TERRATEST_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terratest-run.outputs.terratest_status != 'success'] }}
        run: |
          echo '### WORKFLOW SUMMARY :octocat:' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| result | job |' >> $GITHUB_STEP_SUMMARY
          echo '|---|---|' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_FMT_RESULT }} | terraform format |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_DOCS_RESULT }} | terraform docs |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_LINT_RESULT }} | terraform lint |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_SECURITY_RESULT }} | terraform security |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_TERRATEST_RESULT }} | terratest result |' >> $GITHUB_STEP_SUMMARY
