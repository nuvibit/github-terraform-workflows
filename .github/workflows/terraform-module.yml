name: TERRAFORM MODULE

on:
  workflow_call:
    inputs:
      github_runner:
        description: 'Name of GitHub-hosted runner or self-hosted runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      tfe_hostname:
        description: 'Hostname for terraform cloud/enterprise'
        default: 'app.terraform.io'
        required: false
        type: string
      terraform_version:
        description: 'Terraform version used for Terratest'
        default: 'latest'
        required: false
        type: string
      terratest_path:
        description: 'Path to terratest directory'
        default: 'test'
        required: false
        type: string
      terratest_examples_path:
        description: 'Path to terratest example directory'
        default: 'examples'
        required: false
        type: string
      tflint_repo:
        description: 'Public repo where tflint config is stored'
        default: 'nuvibit/github-tflint-config'
        required: false
        type: string
      tflint_repo_config_path:
        description: 'Path to tflint config in tflint_repo (e.g. "aws/.tflint.hcl")'
        default: ''
        required: false
        type: string
      tflint_repo_ref:
        description: 'Ref or branch of tflint_repo'
        default: 'main'
        required: false
        type: string
      tflint_version:
        description: 'Tflint version to use'
        default: 'latest'
        required: false
        type: string
      tfsec_version:
        description: 'Tfsec version to use'
        default: 'latest'
        required: false
        type: string
      commit_user:
        description: 'Username which should be used for commits by github action'
        default: 'github-actions'
        required: false
        type: string
      commit_email:
        description: 'Email which should be used for commits by github action'
        default: 'noreply@github.com'
        required: false
        type: string
      concurrency_group:
        description: 'Name of concurrency group to manage concurrent github action runs'
        default: ${{ github.repository }}/${{ github.event.pull_request.head.ref || github.ref }}
        required: false
        type: string
    secrets:
      GHE_API_TOKEN:
        required: true
      TFE_API_TOKEN:
        required: true
      TERRATEST_AWS_DEFAULT_REGION:
        required: false
      TERRATEST_AWS_ACCESS_KEY_ID:
        required: false
      TERRATEST_AWS_SECRET_ACCESS_KEY:
        required: false
      TERRATEST_ARM_SUBSCRIPTION_ID:
        required: false
      TERRATEST_ARM_TENANT_ID:
        required: false
      TERRATEST_ARM_CLIENT_ID:
        required: false
      TERRATEST_ARM_CLIENT_SECRET:
        required: false

# Ensures that only one workflow runs at a time
concurrency: ${{ inputs.concurrency_group }}

jobs:
  terraform-fmt:
    runs-on: ${{ inputs.github_runner }}
    outputs:
      fmt_status: ${{ steps.fmt.outcome }}
      diff_exists: ${{ steps.fmt_commit.outputs.diff }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Commit Changes
        id: fmt_commit
        run: |
          git config --local user.name "${{ inputs.commit_user }}"
          git config --local user.email "${{ inputs.commit_email }}"
          if [[ -z $(git status -s) ]]; then
            echo "::set-output name=diff::false"
          else
            echo "::set-output name=diff::true"
          fi
          git diff-index --quiet HEAD || git commit -m "style(terraform fmt): format code" -a

      - name: Push Changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.pull_request.head.ref }}

  terraform-docs:
    needs:
      - terraform-fmt
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      docs_status: ${{ steps.docs.outcome }}
      diff_exists: ${{ steps.docs.outputs.num_changed > 0 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Check For Submodules
        id: check_submodules
        run: |
          if [[ -d "./modules" ]]; then
              echo "::set-output name=dir_exists::true"
          else
              echo "::set-output name=dir_exists::false"
          fi

      - name: Run Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: .
          recursive: ${{ steps.check_submodules.outputs.dir_exists }}
          recursive-path: modules
          output-file: README.md
          output-method: inject
          args: --sort-by required
          git-push: true
          git-push-user-name: ${{ inputs.commit_user }}
          git-push-user-email: ${{ inputs.commit_email }}
          git-commit-message: "docs(terraform-docs): update readme"

  terraform-lint:
    needs: 
      - terraform-fmt
      - terraform-docs
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      lint_status: ${{ steps.lint.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Get TFLint Config
        uses: terraform-linters/tflint-load-config-action@v0
        if: ${{ inputs.tflint_repo_config_path != '' }}
        with:
          source-repo: ${{ inputs.tflint_repo }}
          source-path: ${{ inputs.tflint_repo_config_path }}
          source-ref: ${{ inputs.tflint_repo_ref }}

      - name: Run TFLint
        uses: reviewdog/action-tflint@v1
        id: lint
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tflint_version: ${{ inputs.tflint_version }}
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter
          level: error
          flags: ""
          tflint_init: true

  terraform-security:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      security_status: ${{ steps.security.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Check For Examples
        run: |
          if [[ ! -d "./${{ inputs.terratest_examples_path }}" ]]; then
            echo "could not find examples path '${{ inputs.terratest_examples_path }}' required for terratest"
            exit 1
          fi
      
      - name: Run TFSec
        uses: reviewdog/action-tfsec@v1
        id: security
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ${{ inputs.terratest_examples_path }}
          tfsec_version: ${{ inputs.tfsec_version }}
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter
          level: error
          flags: ""
          tfsec_flags: --force-all-dirs

  terratest-run:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
    if: ${{ needs.terraform-fmt.outputs.diff_exists == 'false' && needs.terraform-docs.outputs.diff_exists == 'false' }}
    runs-on: ${{ inputs.github_runner }}
    outputs:
      terratest_status: ${{ steps.terratest_summary.outcome }}

    steps:
      - name: Set Git Access Token
        run: |
          git config --global url."https://oauth2:${{ secrets.GHE_API_TOKEN }}@github.com".insteadOf https://github.com

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GHE_API_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3

      - name: Get Dependencies
        working-directory: ${{ inputs.terratest_path }}
        run: |
          go get -v -t -d
          wget https://github.com/gruntwork-io/terratest/releases/download/v0.40.6/terratest_log_parser_linux_amd64
          chmod +x terratest_log_parser_linux_amd64

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false
          cli_config_credentials_hostname: ${{ inputs.tfe_hostname }}
          cli_config_credentials_token: ${{ secrets.TFE_API_TOKEN }}

      - name: Run Terratest
        id: terratest_run
        working-directory: ${{ inputs.terratest_path }}
        env:
          AWS_DEFAULT_REGION: ${{ secrets.TERRATEST_AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRATEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRATEST_AWS_SECRET_ACCESS_KEY }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRATEST_ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TERRATEST_ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.TERRATEST_ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRATEST_ARM_CLIENT_SECRET }}
        run: |
          go test -v -timeout 30m 2>&1 | tee >(./terratest_log_parser_linux_amd64)
          test ${PIPESTATUS[0]} -eq 0
          echo "./out/summary.log"
      
      - name: Terratest Summary
        if: ${{ always() }}
        id: terratest_summary
        working-directory: ${{ inputs.terratest_path }}
        run: |
          echo '### TERRATEST SUMMARY :octocat:' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.terraform_lock_file.outputs.artifact_name }}' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| result | test |' >> $GITHUB_STEP_SUMMARY
          echo '|---|---|' >> $GITHUB_STEP_SUMMARY

          if [[ ! -f "./out/summary.log" ]]; then
            echo '' >> $GITHUB_STEP_SUMMARY
            echo ":x: missing terratest log file 'summary.log'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          test_exists=false
          test_failed=false
          while IFS= read -r line
          do
            if [[ "$line" == *"--- PASS"* ]]; then
              echo "| $line |" | sed 's/--- PASS:/:white_check_mark: |/g' >> $GITHUB_STEP_SUMMARY
              test_exists=true
            elif [[ "$line" == *"--- FAIL"* ]]; then
              echo "| $line |" | sed 's/--- FAIL:/:x: |/g' >> $GITHUB_STEP_SUMMARY
              test_exists=true
              test_failed=true
            fi
          done < "./out/summary.log"

          if [[ $test_exists == false ]]; then
            echo '' >> $GITHUB_STEP_SUMMARY
            echo ":x: no terratest results found in 'summary.log'" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ $test_failed == true ]]; then
            exit 1
          fi
        continue-on-error: true

      - name: Terratest Outcome
        if: ${{ steps.terratest_summary.outcome == 'failure' || steps.terratest_summary.outputs.exitcode == '1' }}
        run: exit 1

  workflow-summary:
    needs:
      - terraform-fmt
      - terraform-docs
      - terraform-lint
      - terraform-security
      - terratest-run
    runs-on: ${{ inputs.github_runner }}
    if: ${{ always() }}

    steps:
      - name: Workflow Summary
        env:
          TF_FMT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-fmt.outputs.fmt_status != 'success'] }}
          TF_DOCS_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-docs.outputs.docs_status != 'success'] }}
          TF_LINT_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-lint.outputs.lint_status != 'success'] }}
          TF_SECURITY_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terraform-security.outputs.security_status != 'success'] }}
          TF_TERRATEST_RESULT: ${{ fromJSON('[":white_check_mark:", ":x:"]')[needs.terratest-run.outputs.terratest_status != 'success'] }}
        run: |
          echo '### WORKFLOW SUMMARY :octocat:' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| result | job |' >> $GITHUB_STEP_SUMMARY
          echo '|---|---|' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_FMT_RESULT }} | terraform format |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_DOCS_RESULT }} | terraform docs |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_LINT_RESULT }} | terraform lint |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_SECURITY_RESULT }} | terraform security |' >> $GITHUB_STEP_SUMMARY
          echo '| ${{ env.TF_TERRATEST_RESULT }} | terratest result |' >> $GITHUB_STEP_SUMMARY
